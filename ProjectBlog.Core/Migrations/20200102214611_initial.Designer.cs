// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectBlog.Core.DataAccess.Data;

namespace ProjectBlog.Core.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200102214611_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProjectBlog.Entities.Concrete.Auth.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationType");

                    b.Property<bool>("Confirmation");

                    b.Property<DateTime>("OperationDate");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<int?>("PersonalInfoId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("Status");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("PersonalInfoId");

                    b.ToTable("User","Auth");
                });

            modelBuilder.Entity("ProjectBlog.Entities.Concrete.Auth.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OperationDate");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserRole","Auth");
                });

            modelBuilder.Entity("ProjectBlog.Entities.Concrete.Info.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OperationDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("Status");

                    b.Property<int>("Type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Contact","Info");
                });

            modelBuilder.Entity("ProjectBlog.Entities.Concrete.Info.PersonalContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId");

                    b.Property<DateTime>("OperationDate");

                    b.Property<int>("PersonalId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("PersonalId");

                    b.ToTable("PersonalContact","Info");
                });

            modelBuilder.Entity("ProjectBlog.Entities.Concrete.Info.PersonalInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthdate");

                    b.Property<int>("Gender");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("NationalNumber")
                        .HasMaxLength(12);

                    b.Property<DateTime>("OperationDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("Status");

                    b.Property<string>("Surname")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PersonalInfo","Info");
                });

            modelBuilder.Entity("ProjectBlog.Entities.Concrete.Auth.User", b =>
                {
                    b.HasOne("ProjectBlog.Entities.Concrete.Info.PersonalInfo", "PersonalInfo")
                        .WithMany()
                        .HasForeignKey("PersonalInfoId");
                });

            modelBuilder.Entity("ProjectBlog.Entities.Concrete.Auth.UserRole", b =>
                {
                    b.HasOne("ProjectBlog.Entities.Concrete.Auth.User", "user")
                        .WithOne("UserRole")
                        .HasForeignKey("ProjectBlog.Entities.Concrete.Auth.UserRole", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjectBlog.Entities.Concrete.Info.PersonalContact", b =>
                {
                    b.HasOne("ProjectBlog.Entities.Concrete.Info.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjectBlog.Entities.Concrete.Info.PersonalInfo", "PersonalInfo")
                        .WithMany("PersonalContacts")
                        .HasForeignKey("PersonalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
